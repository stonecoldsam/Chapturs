// User and Authentication Types
export interface User {
  id: string
  email: string
  name: string
  image?: string
  createdAt: Date
  readingHistory: ReadingHistoryEntry[]
  subscriptions: string[] // Work IDs
  bookmarks: string[] // Work IDs
  preferences: UserPreferences
  creatorProfile?: CreatorProfile
  adSupportLevel?: 'normal' | 'boosted' | 'video'
  isPremium?: boolean
}

export interface UserPreferences {
  preferredFormats: ContentFormat[]
  mutedFormats: ContentFormat[]
  readingMode: 'scroll' | 'paginated'
  theme: 'light' | 'dark'
  autoPlayComics: boolean
  glossaryTooltips: boolean
  contentFilters: {
    maturityLevel: 'all' | 'teen' | 'mature' | 'adult'
    languages: string[]
    excludedGenres: string[]
  }
}

export interface ReadingHistoryEntry {
  workId: string
  lastReadSectionId: string
  lastReadAt: Date
  readingProgress: number // 0-1
  timeSpent: number // in minutes
  bookmarkedSections: string[]
}

// Content Types
export type ContentFormat = 'novel' | 'article' | 'comic' | 'hybrid' | 'experimental'
export type WorkStatus = 'draft' | 'published' | 'ongoing' | 'completed' | 'hiatus'
export type MaturityRating = 'general' | 'teen' | 'mature' | 'adult'

export interface Work {
  id: string
  title: string
  description: string
  authorId: string
  author: Author
  formatType: ContentFormat
  status: WorkStatus
  maturityRating: MaturityRating
  
  // Metadata
  genres: string[]
  tags: string[]
  languages: string[]
  coverImage?: string
  thumbnails: string[]
  
  // Content
  sections: Section[]
  glossary: GlossaryEntry[]
  
  // Stats
  statistics: WorkStatistics
  
  // Timestamps
  createdAt: Date
  updatedAt: Date
  publishedAt?: Date
  scheduledAt?: Date
}

export interface Section {
  id: string
  workId: string
  title: string
  chapterNumber?: number
  orderIndex: number
  
  // Content based on format
  content: SectionContent
  
  // Metadata
  wordCount: number
  estimatedReadTime: number
  publishedAt?: Date
  isPublished: boolean
  
  // Definitions for this section
  definitions: Definition[]
}

export interface SectionContent {
  // Text content (novels, articles, hybrid)
  text?: string
  html?: string
  
  // Image content (comics, hybrid)
  images?: MediaFile[]
  
  // Hybrid content
  textBlocks?: TextBlock[]
  imageBlocks?: ImageBlock[]
  
  // Raw data for editing
  rawContent?: any
}

export interface TextBlock {
  id: string
  content: string
  orderIndex: number
  type: 'paragraph' | 'heading' | 'quote' | 'note'
}

export interface ImageBlock {
  id: string
  images: MediaFile[]
  orderIndex: number
  caption?: string
  altText: string
}

export interface MediaFile {
  id: string
  url: string
  filename: string
  mimeType: string
  size: number
  width?: number
  height?: number
  altText?: string
}

// Glossary and Definitions
export interface GlossaryEntry {
  id: string
  workId: string
  term: string
  definition: string
  firstAppearanceSection?: string
  aliases: string[]
  category: 'character' | 'location' | 'concept' | 'organization' | 'other'
  spoilerLevel: 'none' | 'minor' | 'major'
}

// Alias for compatibility
export type GlossaryTerm = GlossaryEntry

export interface Definition {
  id: string
  sectionId: string
  term: string
  definition: string
  position?: {
    start: number
    end: number
  }
  isAutoGenerated: boolean
}

// Creator and Author Types
export interface Author {
  id: string
  username: string
  displayName: string
  bio?: string
  avatar?: string
  socialLinks: SocialLink[]
  verified: boolean
  statistics: AuthorStatistics
}

export interface CreatorProfile {
  id: string
  userId: string
  displayName: string
  bio: string
  specialties: ContentFormat[]
  socialLinks: SocialLink[]
  monetization: MonetizationSettings
  analytics: CreatorAnalytics
}

export interface SocialLink {
  platform: 'twitter' | 'instagram' | 'youtube' | 'website' | 'other'
  url: string
  handle?: string
}

export interface MonetizationSettings {
  enabled: boolean
  patreonUrl?: string
  kofiUrl?: string
  paypalUrl?: string
  customDonationUrl?: string
  subscriptionTiers: SubscriptionTier[]
}

export interface SubscriptionTier {
  id: string
  name: string
  price: number
  description: string
  benefits: string[]
  earlyAccess: boolean
  exclusiveContent: boolean
}

export interface Subscription {
  id: string
  userId: string
  story: Work // The subscribed work
  subscribedAt: Date
  lastReadSection?: string
  lastReadChapter?: number // For compatibility
  notificationsEnabled: boolean
  tier?: SubscriptionTier
}

// Feed and Discovery Types
export interface FeedItem {
  id: string
  work: Work
  section?: Section // Current/next section to read
  
  // Feed metadata
  feedType: 'subscribed' | 'new' | 'discovery' | 'algorithmic'
  reason?: string // Why this item is in the feed
  score: number // Relevance score
  
  // User interaction state
  readingStatus: 'unread' | 'in-progress' | 'caught-up' | 'completed'
  lastReadSection?: string
  bookmark?: boolean
  liked?: boolean
  
  // Timestamps
  addedToFeedAt: Date
  lastInteractionAt?: Date
}

export interface FeedFilters {
  formats: ContentFormat[]
  genres: string[]
  maturityRating: MaturityRating[]
  status: WorkStatus[]
  sortBy: 'recent' | 'popular' | 'rating' | 'length' | 'random'
  timeRange: 'day' | 'week' | 'month' | 'year' | 'all'
}

export interface SearchFilters {
  query?: string
  formats?: ContentFormat[]
  genres?: string[]
  status?: string[]
  maturityRating?: string[]
  minRating?: number
  sortBy?: 'relevance' | 'recent' | 'popular' | 'rating' | 'length'
  timeRange?: 'day' | 'week' | 'month' | 'year' | 'all'
  popularity?: string
  recency?: string
  searchInContent?: boolean
}

// Statistics and Analytics
export interface WorkStatistics {
  views: number
  uniqueReaders: number
  subscribers: number
  bookmarks: number
  likes: number
  comments: number
  shares: number
  averageRating: number
  ratingCount: number
  averageReadTime: number
  completionRate: number
  dropoffPoints: number[]
}

export interface AuthorStatistics {
  totalWorks: number
  totalViews: number
  totalSubscribers: number
  averageRating: number
  worksCompleted: number
  monthlyViews: number
  growthRate: number
}

export interface CreatorAnalytics {
  revenueData: RevenueData
  audienceData: AudienceData
  contentPerformance: ContentPerformance[]
  engagementMetrics: EngagementMetrics
}

export interface RevenueData {
  monthly: number
  total: number
  sources: {
    subscriptions: number
    donations: number
    advertising: number
    merchandise: number
  }
  projectedMonthly: number
}

export interface AudienceData {
  totalFollowers: number
  activeReaders: number
  demographics: {
    ageGroups: Record<string, number>
    locations: Record<string, number>
    devices: Record<string, number>
  }
  retentionRate: number
}

export interface ContentPerformance {
  workId: string
  title: string
  format: ContentFormat
  views: number
  engagement: number
  revenue: number
  trending: boolean
}

export interface EngagementMetrics {
  averageReadTime: number
  commentsPerWork: number
  sharesPerWork: number
  subscriptionRate: number
  bookmarkRate: number
}

// Upload and Draft Types
export interface UploadSession {
  id: string
  userId: string
  workId?: string
  formatType: ContentFormat
  files: UploadedFile[]
  metadata: WorkMetadata
  sections: DraftSection[]
  status: 'uploading' | 'processing' | 'ready' | 'published' | 'error'
  createdAt: Date
}

export interface UploadedFile {
  id: string
  filename: string
  originalName: string
  mimeType: string
  size: number
  url: string
  processed: boolean
  metadata?: any
}

export interface WorkMetadata {
  title: string
  description: string
  genres: string[]
  tags: string[]
  maturityRating: MaturityRating
  language: string
  coverImage?: string
  scheduledPublishAt?: Date
}

export interface DraftSection {
  id: string
  title: string
  content: SectionContent
  orderIndex: number
  isComplete: boolean
  notes?: string
}

// Search and Discovery Types
export interface SearchResult {
  works: Work[]
  total: number
  facets: SearchFacets
  suggestions: string[]
  took: number
}

export interface SearchFacets {
  formats: Record<ContentFormat, number>
  genres: Record<string, number>
  maturityRatings: Record<MaturityRating, number>
  authors: Record<string, number>
  languages: Record<string, number>
}

export interface SearchQuery {
  query: string
  filters: FeedFilters
  page: number
  limit: number
  includeContent: boolean
  fuzzy: boolean
}

// Reading Progress Types
export interface ReadingSession {
  id: string
  userId: string
  workId: string
  sectionId: string
  startedAt: Date
  endedAt?: Date
  progressPercentage: number
  timeSpent: number
  device: string
  source: 'web' | 'mobile' | 'tablet'
}

export interface ReadingProgress {
  workId: string
  currentSection: string
  sectionsRead: string[]
  totalSections: number
  progressPercentage: number
  estimatedTimeRemaining: number
  lastReadAt: Date
  averageReadingSpeed: number // words per minute
}

// UI and Component Types
export interface HubMode {
  current: 'reader' | 'creator'
  theme: 'light' | 'dark'
  sidebarCollapsed: boolean
}

export interface ReaderSettings {
  fontSize: 'small' | 'medium' | 'large' | 'xl'
  lineHeight: 'tight' | 'normal' | 'relaxed'
  fontFamily: 'serif' | 'sans-serif' | 'mono'
  backgroundColor: string
  textColor: string
  maxWidth: string
  glossaryEnabled: boolean
  autoScrollSpeed: number
}

export interface ComicReaderSettings {
  viewMode: 'single' | 'double' | 'strip'
  zoomLevel: number
  autoAdvance: boolean
  preloadNext: boolean
  backgroundColor: 'black' | 'white' | 'gray'
}

// Legacy compatibility types (to maintain existing functionality)
export interface Story {
  id: string
  title: string
  author: Author
  description: string
  genres: string[]
  thumbnail: string
  status: 'ongoing' | 'completed'
  chapters: Chapter[]
  statistics: Statistics
  tags: string[]
  lastUpdated: Date
  createdAt: Date
}

export interface Chapter {
  id: string
  storyId: string
  title: string
  content: string
  chapterNumber: number
  wordCount: number
  publishedAt: Date
  isPublished: boolean
  glossaryTerms?: GlossaryEntry[]
}

export interface Statistics {
  views: number
  subscribers: number
  bookmarks: number
  likes: number
  comments: number
  averageRating: number
  ratingCount: number
}
