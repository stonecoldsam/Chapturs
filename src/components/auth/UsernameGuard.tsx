'use client'

import { useEffect, useState } from 'react'
import { useSession } from 'next-auth/react'
import UsernameSelectionModal from './UsernameSelectionModal'

/**
 * UsernameGuard
 * 
 * This component checks if the current user has a temporary auto-generated
 * username (e.g., @smccrary94_1760332252536) and shows a modal to let them
 * choose a custom username.
 * 
 * Auto-generated usernames follow the pattern: {emailPrefix}_{timestamp}
 */
export default function UsernameGuard({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession()
  const [needsUsername, setNeedsUsername] = useState(false)
  const [isChecking, setIsChecking] = useState(true)

  useEffect(() => {
    if (status === 'loading') {
      return
    }

    if (status === 'unauthenticated') {
      setIsChecking(false)
      return
    }

    if (session?.user) {
      // Check if username looks auto-generated (contains underscore followed by timestamp)
      // Pattern: {emailPrefix}_{timestamp}
      const checkUsername = async () => {
        try {
          const response = await fetch('/api/auth/current-user')
          const data = await response.json()
          
          if (data.user?.username) {
            const username = data.user.username
            // Check if username matches auto-generated pattern: contains underscore and ends with numbers
            const isAutoGenerated = /_\d+$/.test(username)
            
            setNeedsUsername(isAutoGenerated)
          }
        } catch (error) {
          console.error('Error checking username:', error)
        } finally {
          setIsChecking(false)
        }
      }

      checkUsername()
    } else {
      setIsChecking(false)
    }
  }, [session, status])

  if (isChecking) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full" />
      </div>
    )
  }

  if (needsUsername && session?.user) {
    return (
      <>
        {children}
        <UsernameSelectionModal
          currentUsername={session.user.name || 'user'}
          userEmail={session.user.email || 'unknown'}
          onComplete={() => {
            setNeedsUsername(false)
            window.location.reload()
          }}
        />
      </>
    )
  }

  return <>{children}</>
}
