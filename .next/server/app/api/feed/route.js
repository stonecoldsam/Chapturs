"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/feed/route";
exports.ids = ["app/api/feed/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeed%2Froute&page=%2Fapi%2Ffeed%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeed%2Froute.ts&appDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeed%2Froute&page=%2Fapi%2Ffeed%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeed%2Froute.ts&appDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_VS_CODE_PROJECTS_chapturs_src_app_api_feed_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/feed/route.ts */ \"(rsc)/./src/app/api/feed/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/feed/route\",\n        pathname: \"/api/feed\",\n        filename: \"route\",\n        bundlePath: \"app/api/feed/route\"\n    },\n    resolvedPagePath: \"D:\\\\VS CODE PROJECTS\\\\chapturs\\\\src\\\\app\\\\api\\\\feed\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_VS_CODE_PROJECTS_chapturs_src_app_api_feed_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/feed/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZmZWVkJTJGcm91dGUmcGFnZT0lMkZhcGklMkZmZWVkJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZmVlZCUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDVlMlMjBDT0RFJTIwUFJPSkVDVFMlNUNjaGFwdHVycyU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q1ZTJTIwQ09ERSUyMFBST0pFQ1RTJTVDY2hhcHR1cnMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2E7QUFDMUY7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGFwdHVycy8/NjJmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxWUyBDT0RFIFBST0pFQ1RTXFxcXGNoYXB0dXJzXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGZlZWRcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2ZlZWQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9mZWVkXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9mZWVkL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcVlMgQ09ERSBQUk9KRUNUU1xcXFxjaGFwdHVyc1xcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxmZWVkXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9mZWVkL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeed%2Froute&page=%2Fapi%2Ffeed%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeed%2Froute.ts&appDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/feed/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/feed/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database_PrismaService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database/PrismaService */ \"(rsc)/./src/lib/database/PrismaService.ts\");\n\n\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const hubMode = searchParams.get(\"hubMode\") || \"reader\";\n        const userId = searchParams.get(\"userId\");\n        console.log(\"Feed API: Starting to fetch feed items...\", {\n            hubMode,\n            userId\n        });\n        // Get all works from database\n        const works = await _lib_database_PrismaService__WEBPACK_IMPORTED_MODULE_1__.DatabaseService.getAllWorks();\n        console.log(\"Feed API: Found works in database:\", works.length);\n        // Transform works into feed items\n        const feedItems = works.map((work)=>({\n                id: `${work.id}-feed`,\n                work: work,\n                feedType: \"discovery\",\n                score: Math.random(),\n                readingStatus: \"unread\",\n                liked: false,\n                addedToFeedAt: new Date()\n            }));\n        console.log(\"Feed API: Successfully created feed items:\", feedItems.length);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            count: feedItems.length,\n            items: feedItems\n        });\n    } catch (error) {\n        console.error(\"Feed API Error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            items: []\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9mZWVkL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RDtBQUNPO0FBR3ZELGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUlGLFFBQVFHLEdBQUc7UUFDNUMsTUFBTUMsVUFBVUgsYUFBYUksR0FBRyxDQUFDLGNBQWM7UUFDL0MsTUFBTUMsU0FBU0wsYUFBYUksR0FBRyxDQUFDO1FBRWhDRSxRQUFRQyxHQUFHLENBQUMsNkNBQTZDO1lBQUVKO1lBQVNFO1FBQU87UUFFM0UsOEJBQThCO1FBQzlCLE1BQU1HLFFBQVEsTUFBTVgsd0VBQWVBLENBQUNZLFdBQVc7UUFDL0NILFFBQVFDLEdBQUcsQ0FBQyxzQ0FBc0NDLE1BQU1FLE1BQU07UUFFOUQsa0NBQWtDO1FBQ2xDLE1BQU1DLFlBQXdCSCxNQUFNSSxHQUFHLENBQUNDLENBQUFBLE9BQVM7Z0JBQy9DQyxJQUFJLENBQUMsRUFBRUQsS0FBS0MsRUFBRSxDQUFDLEtBQUssQ0FBQztnQkFDckJELE1BQU1BO2dCQUNORSxVQUFVO2dCQUNWQyxPQUFPQyxLQUFLQyxNQUFNO2dCQUNsQkMsZUFBZTtnQkFDZkMsT0FBTztnQkFDUEMsZUFBZSxJQUFJQztZQUNyQjtRQUVBaEIsUUFBUUMsR0FBRyxDQUFDLDhDQUE4Q0ksVUFBVUQsTUFBTTtRQUUxRSxPQUFPZCxxREFBWUEsQ0FBQzJCLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxPQUFPZCxVQUFVRCxNQUFNO1lBQ3ZCZ0IsT0FBT2Y7UUFDVDtJQUNGLEVBQUUsT0FBT2dCLE9BQU87UUFDZHJCLFFBQVFxQixLQUFLLENBQUMsbUJBQW1CQTtRQUNqQyxPQUFPL0IscURBQVlBLENBQUMyQixJQUFJLENBQ3RCO1lBQ0VDLFNBQVM7WUFDVEcsT0FBT0EsaUJBQWlCQyxRQUFRRCxNQUFNRSxPQUFPLEdBQUc7WUFDaERILE9BQU8sRUFBRTtRQUNYLEdBQ0E7WUFBRUksUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGFwdHVycy8uL3NyYy9hcHAvYXBpL2ZlZWQvcm91dGUudHM/OGMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UsIE5leHRSZXF1ZXN0IH0gZnJvbSAnbmV4dC9zZXJ2ZXInXHJcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJ0AvbGliL2RhdGFiYXNlL1ByaXNtYVNlcnZpY2UnXHJcbmltcG9ydCB7IEZlZWRJdGVtIH0gZnJvbSAnQC90eXBlcydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpXHJcbiAgICBjb25zdCBodWJNb2RlID0gc2VhcmNoUGFyYW1zLmdldCgnaHViTW9kZScpIHx8ICdyZWFkZXInXHJcbiAgICBjb25zdCB1c2VySWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCd1c2VySWQnKVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnRmVlZCBBUEk6IFN0YXJ0aW5nIHRvIGZldGNoIGZlZWQgaXRlbXMuLi4nLCB7IGh1Yk1vZGUsIHVzZXJJZCB9KVxyXG4gICAgXHJcbiAgICAvLyBHZXQgYWxsIHdvcmtzIGZyb20gZGF0YWJhc2VcclxuICAgIGNvbnN0IHdvcmtzID0gYXdhaXQgRGF0YWJhc2VTZXJ2aWNlLmdldEFsbFdvcmtzKClcclxuICAgIGNvbnNvbGUubG9nKCdGZWVkIEFQSTogRm91bmQgd29ya3MgaW4gZGF0YWJhc2U6Jywgd29ya3MubGVuZ3RoKVxyXG4gICAgXHJcbiAgICAvLyBUcmFuc2Zvcm0gd29ya3MgaW50byBmZWVkIGl0ZW1zXHJcbiAgICBjb25zdCBmZWVkSXRlbXM6IEZlZWRJdGVtW10gPSB3b3Jrcy5tYXAod29yayA9PiAoe1xyXG4gICAgICBpZDogYCR7d29yay5pZH0tZmVlZGAsXHJcbiAgICAgIHdvcms6IHdvcmssXHJcbiAgICAgIGZlZWRUeXBlOiAnZGlzY292ZXJ5JyBhcyBjb25zdCxcclxuICAgICAgc2NvcmU6IE1hdGgucmFuZG9tKCksIC8vIFJhbmRvbSBzY29yZSBmb3Igbm93XHJcbiAgICAgIHJlYWRpbmdTdGF0dXM6ICd1bnJlYWQnIGFzIGNvbnN0LFxyXG4gICAgICBsaWtlZDogZmFsc2UsXHJcbiAgICAgIGFkZGVkVG9GZWVkQXQ6IG5ldyBEYXRlKClcclxuICAgIH0pKVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnRmVlZCBBUEk6IFN1Y2Nlc3NmdWxseSBjcmVhdGVkIGZlZWQgaXRlbXM6JywgZmVlZEl0ZW1zLmxlbmd0aClcclxuICAgIFxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgY291bnQ6IGZlZWRJdGVtcy5sZW5ndGgsXHJcbiAgICAgIGl0ZW1zOiBmZWVkSXRlbXNcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0ZlZWQgQVBJIEVycm9yOicsIGVycm9yKVxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXHJcbiAgICAgICAgaXRlbXM6IFtdXHJcbiAgICAgIH0sIFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgIClcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkRhdGFiYXNlU2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJodWJNb2RlIiwiZ2V0IiwidXNlcklkIiwiY29uc29sZSIsImxvZyIsIndvcmtzIiwiZ2V0QWxsV29ya3MiLCJsZW5ndGgiLCJmZWVkSXRlbXMiLCJtYXAiLCJ3b3JrIiwiaWQiLCJmZWVkVHlwZSIsInNjb3JlIiwiTWF0aCIsInJhbmRvbSIsInJlYWRpbmdTdGF0dXMiLCJsaWtlZCIsImFkZGVkVG9GZWVkQXQiLCJEYXRlIiwianNvbiIsInN1Y2Nlc3MiLCJjb3VudCIsIml0ZW1zIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/feed/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database/PrismaService.ts":
/*!*******************************************!*\
  !*** ./src/lib/database/PrismaService.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// Real Database Service using Prisma\n// This replaces the mock data with actual database operations\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nclass DatabaseService {\n    // Works Operations\n    static async getAllWorks() {\n        const works = await prisma.work.findMany({\n            include: {\n                author: {\n                    include: {\n                        user: true\n                    }\n                },\n                sections: true,\n                glossaryEntries: true,\n                _count: {\n                    select: {\n                        bookmarks: true\n                    }\n                }\n            },\n            orderBy: {\n                updatedAt: \"desc\"\n            }\n        });\n        return works.map((work)=>this.mapPrismaWorkToWork(work));\n    }\n    static async getWork(id) {\n        const work = await prisma.work.findUnique({\n            where: {\n                id\n            },\n            include: {\n                author: {\n                    include: {\n                        user: true\n                    }\n                },\n                sections: true,\n                glossaryEntries: true,\n                _count: {\n                    select: {\n                        bookmarks: true\n                    }\n                }\n            }\n        });\n        if (!work) return null;\n        return this.mapPrismaWorkToWork(work);\n    }\n    static async searchWorks(query, filters = {}) {\n        const works = await prisma.work.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                title: {\n                                    contains: query\n                                }\n                            },\n                            {\n                                description: {\n                                    contains: query\n                                }\n                            }\n                        ]\n                    },\n                    filters.format ? {\n                        formatType: filters.format\n                    } : {},\n                    {\n                        status: \"ongoing\"\n                    } // Only show published works\n                ]\n            },\n            include: {\n                author: {\n                    include: {\n                        user: true\n                    }\n                },\n                sections: true,\n                glossaryEntries: true,\n                _count: {\n                    select: {\n                        bookmarks: true\n                    }\n                }\n            },\n            take: 20\n        });\n        return works.map((work)=>this.mapPrismaWorkToWork(work));\n    }\n    // User Operations\n    static async createUser(userData) {\n        const user = await prisma.user.create({\n            data: userData\n        });\n        return this.mapPrismaUserToUser(user);\n    }\n    static async getUser(id) {\n        const user = await prisma.user.findUnique({\n            where: {\n                id\n            },\n            include: {\n                subscriptions: {\n                    include: {\n                        work: true\n                    }\n                },\n                bookmarks: {\n                    include: {\n                        work: true\n                    }\n                },\n                readingHistory: {\n                    include: {\n                        work: true,\n                        section: true\n                    }\n                }\n            }\n        });\n        if (!user) return null;\n        return this.mapPrismaUserToUser(user);\n    }\n    static async getUserWorks(userId) {\n        const works = await prisma.work.findMany({\n            where: {\n                authorId: userId\n            },\n            include: {\n                author: true,\n                sections: true,\n                glossaryEntries: true,\n                _count: {\n                    select: {\n                        bookmarks: true\n                    }\n                }\n            },\n            orderBy: {\n                updatedAt: \"desc\"\n            }\n        });\n        return works.map((work)=>this.mapPrismaWorkToWork(work));\n    }\n    // Content Creation\n    static async createWork(data) {\n        const work = await prisma.work.create({\n            data: {\n                title: data.title,\n                description: data.description,\n                authorId: data.authorId,\n                formatType: data.formatType,\n                coverImage: data.coverImage,\n                genres: JSON.stringify(data.genres),\n                tags: JSON.stringify(data.tags),\n                statistics: JSON.stringify({\n                    views: 0,\n                    subscribers: 0,\n                    bookmarks: 0,\n                    likes: 0,\n                    comments: 0,\n                    averageRating: 0,\n                    ratingCount: 0,\n                    completionRate: 0\n                })\n            },\n            include: {\n                author: {\n                    include: {\n                        user: true\n                    }\n                },\n                sections: true,\n                glossaryEntries: true,\n                _count: {\n                    select: {\n                        bookmarks: true\n                    }\n                }\n            }\n        });\n        return this.mapPrismaWorkToWork(work);\n    }\n    static async createSection(data) {\n        return await prisma.section.create({\n            data: {\n                workId: data.workId,\n                title: data.title,\n                content: JSON.stringify(data.content),\n                wordCount: data.wordCount || 0,\n                status: \"published\",\n                publishedAt: new Date()\n            }\n        });\n    }\n    // Subscription Operations (temporary implementation to bypass Prisma type issues)\n    static async toggleSubscription(authorId, userId) {\n        console.log(`Subscription toggle requested: userId=${userId}, authorId=${authorId}`);\n        try {\n            // Use raw SQL query as workaround for Prisma type issues\n            const existing = await prisma.$queryRaw`\r\n        SELECT * FROM subscriptions \r\n        WHERE userId = ${userId} AND authorId = ${authorId}\r\n        LIMIT 1\r\n      `;\n            if (existing.length > 0) {\n                await prisma.$executeRaw`\r\n          DELETE FROM subscriptions \r\n          WHERE userId = ${userId} AND authorId = ${authorId}\r\n        `;\n                console.log(`Subscription removed: userId=${userId}, authorId=${authorId}`);\n                return false;\n            } else {\n                const subscriptionId = Date.now().toString();\n                const now = new Date().toISOString();\n                await prisma.$executeRaw`\r\n          INSERT INTO subscriptions (id, userId, authorId, notificationsEnabled, subscribedAt)\r\n          VALUES (${subscriptionId}, ${userId}, ${authorId}, true, ${now})\r\n        `;\n                console.log(`Subscription created: userId=${userId}, authorId=${authorId}`);\n                return true;\n            }\n        } catch (error) {\n            console.error(\"Subscription toggle error:\", error);\n            return false;\n        }\n    }\n    static async checkUserSubscription(userId, authorId) {\n        console.log(`Subscription check requested: userId=${userId}, authorId=${authorId}`);\n        try {\n            // Use raw SQL query as workaround for Prisma type issues\n            const result = await prisma.$queryRaw`\r\n        SELECT COUNT(*) as count FROM subscriptions \r\n        WHERE userId = ${userId} AND authorId = ${authorId}\r\n      `;\n            const isSubscribed = result[0]?.count > 0;\n            console.log(`Subscription status: userId=${userId}, authorId=${authorId}, subscribed=${isSubscribed}`);\n            return isSubscribed;\n        } catch (error) {\n            console.error(\"Subscription check error:\", error);\n            return false;\n        }\n    }\n    // Bookmark Operations\n    static async toggleBookmark(workId, userId) {\n        console.log(`Bookmark toggle requested: userId=${userId}, workId=${workId}`);\n        try {\n            // Use raw SQL query for consistency with other operations\n            const existing = await prisma.$queryRaw`\r\n        SELECT * FROM bookmarks \r\n        WHERE userId = ${userId} AND workId = ${workId}\r\n        LIMIT 1\r\n      `;\n            if (existing.length > 0) {\n                await prisma.$executeRaw`\r\n          DELETE FROM bookmarks \r\n          WHERE userId = ${userId} AND workId = ${workId}\r\n        `;\n                console.log(`Bookmark removed: userId=${userId}, workId=${workId}`);\n                return false;\n            } else {\n                const bookmarkId = Date.now().toString();\n                const now = new Date().toISOString();\n                await prisma.$executeRaw`\r\n          INSERT INTO bookmarks (id, userId, workId, bookmarkedAt)\r\n          VALUES (${bookmarkId}, ${userId}, ${workId}, ${now})\r\n        `;\n                console.log(`Bookmark created: userId=${userId}, workId=${workId}`);\n                return true;\n            }\n        } catch (error) {\n            console.error(\"Bookmark toggle error:\", error);\n            return false;\n        }\n    }\n    static async checkUserBookmark(userId, workId) {\n        const bookmark = await prisma.bookmark.findUnique({\n            where: {\n                userId_workId: {\n                    userId,\n                    workId\n                }\n            }\n        });\n        return !!bookmark;\n    }\n    // Like Operations\n    static async toggleLike(workId, userId) {\n        console.log(`Like toggle requested: userId=${userId}, workId=${workId}`);\n        try {\n            // Use raw SQL query for consistency with other operations\n            const existing = await prisma.$queryRaw`\r\n        SELECT * FROM likes \r\n        WHERE userId = ${userId} AND workId = ${workId}\r\n        LIMIT 1\r\n      `;\n            if (existing.length > 0) {\n                await prisma.$executeRaw`\r\n          DELETE FROM likes \r\n          WHERE userId = ${userId} AND workId = ${workId}\r\n        `;\n                console.log(`Like removed: userId=${userId}, workId=${workId}`);\n                return false;\n            } else {\n                const likeId = Date.now().toString();\n                const now = new Date().toISOString();\n                await prisma.$executeRaw`\r\n          INSERT INTO likes (id, userId, workId, likedAt)\r\n          VALUES (${likeId}, ${userId}, ${workId}, ${now})\r\n        `;\n                console.log(`Like created: userId=${userId}, workId=${workId}`);\n                return true;\n            }\n        } catch (error) {\n            console.error(\"Like toggle error:\", error);\n            return false;\n        }\n    }\n    static async checkUserLike(userId, workId) {\n        console.log(`Like check requested: userId=${userId}, workId=${workId}`);\n        try {\n            // Use raw SQL query for consistency with other operations\n            const result = await prisma.$queryRaw`\r\n        SELECT COUNT(*) as count FROM likes \r\n        WHERE userId = ${userId} AND workId = ${workId}\r\n      `;\n            const isLiked = result[0]?.count > 0;\n            console.log(`Like status: userId=${userId}, workId=${workId}, liked=${isLiked}`);\n            return isLiked;\n        } catch (error) {\n            console.error(\"Like check error:\", error);\n            return false;\n        }\n    }\n    // Seed database with sample data\n    static async seedDatabase() {\n        console.log(\"Seeding database with sample data...\");\n        // Create sample users\n        const user1 = await prisma.user.upsert({\n            where: {\n                email: \"maya@example.com\"\n            },\n            update: {},\n            create: {\n                email: \"maya@example.com\",\n                username: \"storyteller_maya\",\n                displayName: \"Maya Chen\",\n                bio: \"Fantasy novelist and worldbuilder. Creating epic adventures one chapter at a time.\",\n                verified: true\n            }\n        });\n        // Create author profile\n        const author1 = await prisma.author.upsert({\n            where: {\n                userId: user1.id\n            },\n            update: {},\n            create: {\n                userId: user1.id,\n                verified: true,\n                socialLinks: JSON.stringify([\n                    {\n                        platform: \"twitter\",\n                        url: \"https://twitter.com/storyteller_maya\",\n                        handle: \"@storyteller_maya\"\n                    }\n                ])\n            }\n        });\n        // Create sample work\n        const work1 = await prisma.work.upsert({\n            where: {\n                id: \"work1\"\n            },\n            update: {},\n            create: {\n                id: \"work1\",\n                title: \"The Crystal Nexus Chronicles\",\n                description: \"In a world where magic flows through crystalline networks, young mage Aria discovers she can manipulate the very foundation of reality. But with great power comes ancient enemies who will stop at nothing to control the nexus.\",\n                authorId: author1.id,\n                formatType: \"novel\",\n                status: \"ongoing\",\n                maturityRating: \"PG-13\",\n                genres: JSON.stringify([\n                    \"Fantasy\",\n                    \"Adventure\",\n                    \"Young Adult\"\n                ]),\n                tags: JSON.stringify([\n                    \"magic\",\n                    \"crystals\",\n                    \"coming-of-age\",\n                    \"epic-fantasy\"\n                ]),\n                statistics: JSON.stringify({\n                    views: 15420,\n                    subscribers: 2341,\n                    bookmarks: 892,\n                    likes: 1456,\n                    comments: 234,\n                    averageRating: 4.7,\n                    ratingCount: 156,\n                    completionRate: 0.73\n                })\n            }\n        });\n        // Create sample sections\n        await prisma.section.upsert({\n            where: {\n                id: \"work1-chapter-1\"\n            },\n            update: {},\n            create: {\n                id: \"work1-chapter-1\",\n                workId: work1.id,\n                title: \"The Awakening\",\n                content: JSON.stringify({\n                    text: \"The crystal hummed with an energy Aria had never felt before. As her fingers traced its surface, the world around her began to shimmer and change...\"\n                }),\n                wordCount: 2500,\n                status: \"published\",\n                publishedAt: new Date(\"2024-01-15\")\n            }\n        });\n        console.log(\"Database seeded successfully!\");\n    }\n    // Helper mapping functions\n    static mapPrismaWorkToWork(prismaWork) {\n        return {\n            id: prismaWork.id,\n            title: prismaWork.title,\n            description: prismaWork.description,\n            authorId: prismaWork.authorId,\n            author: {\n                id: prismaWork.author.id,\n                username: prismaWork.author.user.username,\n                displayName: prismaWork.author.user.displayName || prismaWork.author.user.username,\n                bio: prismaWork.author.user.bio || \"\",\n                avatar: prismaWork.author.user.avatar,\n                verified: prismaWork.author.verified,\n                socialLinks: prismaWork.author.socialLinks ? JSON.parse(prismaWork.author.socialLinks) : [],\n                statistics: {\n                    totalWorks: 0,\n                    totalViews: 0,\n                    totalSubscribers: 0,\n                    averageRating: 0,\n                    worksCompleted: 0,\n                    monthlyViews: 0,\n                    growthRate: 0\n                }\n            },\n            formatType: prismaWork.formatType,\n            coverImage: prismaWork.coverImage,\n            status: prismaWork.status,\n            maturityRating: prismaWork.maturityRating,\n            genres: JSON.parse(prismaWork.genres || \"[]\"),\n            tags: JSON.parse(prismaWork.tags || \"[]\"),\n            languages: [\n                \"en\"\n            ],\n            thumbnails: [],\n            statistics: JSON.parse(prismaWork.statistics || \"{}\"),\n            glossary: prismaWork.glossaryEntries?.map((entry)=>({\n                    id: entry.id,\n                    term: entry.term,\n                    definition: entry.definition,\n                    isAutoGenerated: false\n                })) || [],\n            sections: prismaWork.sections?.map((section)=>({\n                    id: section.id,\n                    title: section.title,\n                    content: JSON.parse(section.content || \"{}\"),\n                    wordCount: section.wordCount,\n                    publishedAt: section.publishedAt,\n                    status: section.status\n                })) || [],\n            createdAt: prismaWork.createdAt,\n            updatedAt: prismaWork.updatedAt\n        };\n    }\n    static mapPrismaUserToUser(prismaUser) {\n        return {\n            id: prismaUser.id,\n            email: prismaUser.email,\n            name: prismaUser.username,\n            image: prismaUser.avatar,\n            createdAt: prismaUser.createdAt,\n            subscriptions: prismaUser.subscriptions?.map((sub)=>sub.workId) || [],\n            bookmarks: prismaUser.bookmarks?.map((bookmark)=>bookmark.workId) || [],\n            preferences: {\n                preferredFormats: [\n                    \"novel\"\n                ],\n                mutedFormats: [],\n                readingMode: \"scroll\",\n                theme: \"light\",\n                autoPlayComics: false,\n                glossaryTooltips: true,\n                contentFilters: {\n                    maturityLevel: \"all\",\n                    languages: [\n                        \"en\"\n                    ],\n                    excludedGenres: []\n                }\n            },\n            readingHistory: prismaUser.readingHistory?.map((history)=>({\n                    workId: history.workId,\n                    lastReadSectionId: history.sectionId || \"\",\n                    lastReadAt: history.lastReadAt,\n                    readingProgress: history.progress / 100,\n                    timeSpent: 0,\n                    bookmarkedSections: []\n                })) || []\n        };\n    }\n    // Library Operations\n    static async getUserBookmarks(userId) {\n        try {\n            const bookmarks = await prisma.bookmark.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    work: {\n                        include: {\n                            author: {\n                                include: {\n                                    user: true\n                                }\n                            }\n                        }\n                    }\n                },\n                orderBy: {\n                    bookmarkedAt: \"desc\"\n                }\n            });\n            return bookmarks;\n        } catch (error) {\n            console.error(\"Error fetching user bookmarks:\", error);\n            return [];\n        }\n    }\n    static async getUserSubscriptions(userId) {\n        try {\n            const subscriptions = await prisma.subscription.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    author: {\n                        include: {\n                            user: true\n                        }\n                    }\n                },\n                orderBy: {\n                    subscribedAt: \"desc\"\n                }\n            });\n            return subscriptions;\n        } catch (error) {\n            console.error(\"Error fetching user subscriptions:\", error);\n            return [];\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DatabaseService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database/PrismaService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeed%2Froute&page=%2Fapi%2Ffeed%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeed%2Froute.ts&appDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CVS%20CODE%20PROJECTS%5Cchapturs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();